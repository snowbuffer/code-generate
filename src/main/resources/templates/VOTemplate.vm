package $!{packagePrefix}$!{domainPackage};

import java.io.Serializable;
import javax.persistence.Id;
import com.tupperware.pos.domain.common.Base;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.persistence.GeneratedValue;
import javax.persistence.Table;
#set($decimalcount=0)
#set($datetimecount=0)
#foreach($var in $fieldList)
#if($var.get("type") == "BigDecimal" && $!{decimalcount} == 0)
#set($decimalcount= $decimalcount + 1)
import java.math.BigDecimal;
#end
#end
#foreach($var in $fieldList)
#if(($var.get("type") == "Timestamp" || $var.get("type") == "Date") && $!{datetimecount} == 0)
#set($datetimecount= $datetimecount + 1)
import java.sql.Timestamp;
#end
#end

/**
 * @author cipher
 * @date $!{nowDate}
 */
@Table(name = "$!{tableName}")
@ApiModel(value = "$!{pascalName}PO", description = "xxx")
public class $!{pascalName}PO extends Base {

	private static final long serialVersionUID = 1L;

	@Id
    @GeneratedValue(generator = "JDBC")
    @ApiModelProperty("主键")
    private Long id;

    #foreach($var in $fieldList)
    #if($var.get("camelName") != "id")
    @ApiModelProperty(value = "$var.get("comment")")
    private $var.get("type") $var.get("camelName");
    #end
	#end
    
    #foreach($var in $fieldList)
    public $var.get("type") get$var.get("pascalName")() {
        return $var.get("camelName");
    }
    public void set$var.get("pascalName")($var.get("type") $var.get("camelName")) {
        this.$var.get("camelName") = $var.get("camelName");
    }
    #end
	
	public static class Builder {
	
		public Builder() {
        }
		
		private $!{pascalName}PO po = new $!{pascalName}PO();
		
		#foreach($var in $fieldList)
		public Builder $var.get("camelName")($var.get("type") $var.get("camelName")) {
			po.set$var.get("pascalName")($var.get("camelName"));
			return this;
		}
		#end
		
		public $!{pascalName}PO build() {
            return po;
        }
	
	}
	
	public static Builder builder() {
        return new Builder();
    }
    
}
